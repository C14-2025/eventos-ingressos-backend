name: CI/CD Pipeline

on: [push]

env:
  API_URL: ${{ secrets.API_URL }}
  EMAIL: ${{ secrets.EMAIL }}
  PASSWORD: ${{ secrets.PASSWORD }}
  RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  REDIS_HOST: ${{ secrets.REDIS_HOST }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
  MYSQL_HOST: database
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  NODE_ENV: ${{ secrets.NODE_ENV }}
  PORT: ${{ secrets.PORT }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
  REDIS_PORT: ${{ secrets.REDIS_PORT }}
  REDIS_PREFIX: ${{ secrets.REDIS_PREFIX }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: 12345
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: admin
          MYSQL_PASSWORD: 12345
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: bitnami/redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Criar arquivo .env
        run: |
          echo "PORT=${{ secrets.PORT }}" > .env
          echo "MYSQL_HOST=database" >> .env
          echo "MYSQL_USER=admin" >> .env
          echo "MYSQL_PASSWORD=12345" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_PORT=3306" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "REDIS_HOST=redis" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "API_URL=${{ secrets.API_URL }}" >> .env

      - name: Instalar dependências
        run: npm install

      - name: Gerar chaves RSA
        run: npx ts-node -r tsconfig-paths/register src/shared/scripts/generateKeys.ts

      - name: Aguardar o MySQL estar pronto
        run: |
          echo "Aguardando o MySQL responder na porta 3306..."
          for i in {1..20}; do
            if mysqladmin ping -h 127.0.0.1 --silent; then
              echo "MySQL disponível!"
              exit 0
            fi
            echo "Tentativa $i: aguardando..."
            sleep 5
          done
          echo "MySQL não respondeu a tempo!"
          exit 1

      - name: Iniciar API
        run: |
          yarn dev &
          sleep 12
          echo "API pronta para testes."

      - name: Testar Login e JWT
        run: |
          echo "Testando endpoint /login..."
          RESPONSE=$(curl -s -X POST http://localhost:${{ secrets.PORT }}/login \
            -H "Content-Type: application/json" \
            -d '{"email":"${{ secrets.EMAIL }}","password":"${{ secrets.PASSWORD }}"}')

          echo "Resposta recebida:"
          echo "$RESPONSE"

          TOKEN=$(echo "$RESPONSE" | grep -o '"jwt_token":"[^"]*"' | cut -d'"' -f4)

          if [ -z "$TOKEN" ]; then
            echo "Falha no login — jwt_token não encontrado!"
            exit 1
          fi

          echo "Login bem-sucedido. Token extraído:"
          echo "$TOKEN"

          echo "Testando endpoint /me..."
          ME_RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: Bearer $TOKEN" http://localhost:${{ secrets.PORT }}/me)
          BODY=$(echo "$ME_RESPONSE" | head -n1)
          STATUS=$(echo "$ME_RESPONSE" | tail -n1)

          echo "Código HTTP: $STATUS"
          echo "Resposta /me:"
          echo "$BODY"

          if [ "$STATUS" -eq 200 ]; then
            echo "Teste de autenticação /me bem-sucedido!"
          else
            echo "Falha na autenticação (HTTP $STATUS)"
            exit 1
          fi

      - name: Rodar testes automatizados
        run: |
          sleep 5
          yarn test --testPathPattern=Service.spec.ts
